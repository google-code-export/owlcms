package org.concordiainternational.competition.ui;

import java.io.Serializable;

import org.concordiainternational.competition.data.Category;
import org.concordiainternational.competition.data.Group;
import org.hibernate.Session;

import com.vaadin.Application;
import com.vaadin.data.hbnutil.HbnContainer;
import com.vaadin.data.hbnutil.HbnContainer.EntityItem;
import com.vaadin.data.hbnutil.HbnContainer.SessionManager;
import com.vaadin.event.Action;
import com.vaadin.event.Action.Handler;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Table.ColumnGenerator;

public class CategoryListEditor extends VerticalLayout implements ClickListener, SessionManager {

	private static final long serialVersionUID = -3014859089271158928L;
	private Application app = null;
	private Table table = new Table();
    private Button addCompetitionGroupButton;
    private Button toggleEditModeButton;


    
    public CategoryListEditor(Application app) {
		super();
		this.app = app;
        buildView();
	}

    public Session getSession() {
		return ((SessionManager)app).getSession();
	}


	/**
     * Builds a simple view for application with Table and a row of buttons
     * below it.
     */
    private void buildView() {

    	this.setSizeFull();
        this.setMargin(false);

        HorizontalLayout ol = new HorizontalLayout();

        addCompetitionGroupButton = new Button("Add category", this);
        ol.addComponent(addCompetitionGroupButton);
        toggleEditModeButton = new Button("Toggle edit mode in table", this);
        ol.addComponent(toggleEditModeButton);;
        this.addComponent(ol);

        populateAndConfigureTable();

        this.addComponent(table);

        // make table consume all extra space
        this.setSizeFull();
        this.setExpandRatio(table, 1);
        table.setSizeFull();
    }

    @SuppressWarnings("serial")
	protected void populateAndConfigureTable() {
        table = new Table();
        table.setWidth("100%");
        table.setSelectable(true);
        table.setImmediate(true);
        table.setColumnCollapsingAllowed(true);
        table.setTableFieldFactory(new GroupListFieldFactory((SessionManager)app));
        
        // add context menus for rows
        table.addActionHandler(new Handler() {
			Action add = new Action("Add new row to table");
            Action remove = new Action("Delete this row");
            Action[] actions = new Action[] { add, remove };

            public Action[] getActions(Object target, Object sender) {
                return actions;
            }

            public void handleAction(Action action, Object sender, Object target) {
                if (action == add) {
                    newRow();
                } else if (action == remove) {
                    Category g = (Category) getSession().get(Group.class,(Serializable) target);
                    deleteCategory(g);
                }
            }
        });

        loadCategories();
    }

    /**
     * Loads container to Table
     */
    protected void loadCategories() {
        final HbnContainer<?> cont;
        cont = new HbnContainer<Category>(Category.class, (SessionManager)app);
        table.setContainerDataSource(cont);
        table.setVisibleColumns(Category.getColOrder());
        table.setColumnHeaders(Category.getColHeaders(app.getLocale()));

        // action buttons on each row
        table.removeGeneratedColumn("actions");
        table.addGeneratedColumn("actions", new ColumnGenerator() {
        	private static final long serialVersionUID = 7397136740353981832L;

        	public Component generateCell(Table source,
        			final Object itemId, Object columnId) {
        		HorizontalLayout actions = new HorizontalLayout();
        		Button del = new Button("Delete");
        		del.addListener(new ClickListener() {
        			private static final long serialVersionUID = 5204920602544644705L;

        			@SuppressWarnings("unchecked")
        			public void buttonClick(ClickEvent event) {
        				deleteCategory((Category) ((EntityItem) cont
        						.getItem(itemId)).getPojo());
        			}

        		});
        		actions.addComponent(del);

        		return actions;
        	}
        });
    }

    /**
     * Saves changes made to Category object to Hibernate Session. Note that run
     * is most likely detached due session-per-request patterns so we'll use
     * merge. Actual database update will happen by Vaadin's transaction
     * listener in the end of request.
     * 
     * If one wanted to make sure that this operation will be successful a
     * (Hibernate) transaction commit and error checking ought to be done.
     * 
     * @param group
     */
    public void persistCategory(Category group) {
        getSession().merge(group);
        table.setValue(null);
    }

    /**
     * Delete given Category object from Table. Table will delegate deletion to
     * its container.
     * 
     * @param group
     */
    public void deleteCategory(Category group) {
        Long id = group.getId();
        table.removeItem(id);
    }

    /**
     * Adds new row to Table and selects new row. Table will delegate Item
     * creation to its container.
     */
    private void newRow() {
        Object newItemId = table.addItem();
        // upen in editor window unless table is in content editable mode
        if (!table.isEditable()) {
            table.setValue(newItemId);
        }
    }


	public void buttonClick(ClickEvent event) {
        if (addCompetitionGroupButton == event.getButton()) {
            newRow();
        } else if (toggleEditModeButton == event.getButton()) {
            table.setEditable(!table.isEditable());
        }
    }


   
}
