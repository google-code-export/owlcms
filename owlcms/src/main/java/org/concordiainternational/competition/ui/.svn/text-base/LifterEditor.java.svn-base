package org.concordiainternational.competition.ui.old;

import java.util.Locale;

import org.concordiainternational.competition.Messages;
import org.concordiainternational.competition.data.Category;
import org.concordiainternational.competition.data.Lifter;
import org.concordiainternational.competition.ui.WeighInList;
import org.hibernate.Session;

import com.vaadin.Application;
import com.vaadin.data.hbnutil.HbnContainer.SessionManager;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Layout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Select;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;

@SuppressWarnings("serial")
public class LifterEditor extends Window implements ClickListener, SessionManager{

    private TextField lastName = new TextField("Last Name");
    private TextField firstName = new TextField("First Name");
    private TextField gender = new TextField("Gender");
	private Select categorySelect;
	private TextField bodyWeight = new TextField("Body Weight");
	private TextField snatch1Declaration = new TextField("Initial Snatch");
	private TextField cleanJerk1Declaration = new TextField("Initial C&J");
	
	private static String[] NATURAL_COL_ORDER = null;
	private static String[] COL_HEADERS = null;
	/**
	 * @return Natural property order for Category bean. Used in tables and forms.
	 */
	public static String[] getColOrder() {
		if (NATURAL_COL_ORDER != null) return NATURAL_COL_ORDER;
		NATURAL_COL_ORDER = new String[] {
				"lastName",
				"firstName",
				"gender",
				"category",
				"bodyWeight",
				"snatch1Declaration",
				"cleanJerk1Declaration",
				"actions"	// in table mode, actions come last.
			};		
		return NATURAL_COL_ORDER;
	}

	/**
	 * @return Localized captions for properties in same order as in {@link #getColOrder()}}
	 */
	public static String[] getColHeaders(Locale locale) {
		if (COL_HEADERS != null) return COL_HEADERS;
		COL_HEADERS = new String[] {
			Messages.getString("Lifter.lastName", locale), //$NON-NLS-1$
			Messages.getString("Lifter.firstName", locale), //$NON-NLS-1$
			Messages.getString("Lifter.gender", locale), //$NON-NLS-1$
			Messages.getString("Lifter.category", locale), //$NON-NLS-1$
			Messages.getString("Lifter.bodyWeight", locale), //$NON-NLS-1$
			Messages.getString("Lifter.snatch1Declaration", locale), //$NON-NLS-1$
			Messages.getString("Lifter.cleanJerk1Declaration", locale), //$NON-NLS-1$
			Messages.getString("Common.actions", locale), //$NON-NLS-1$
		};
		return COL_HEADERS;
	}
	
    private Button save = new Button("Save");
    private Button delete = new Button("Delete");

    private Lifter lifter;
    private WeighInList listEditor;
    private Application app;
	private LifterListFieldFactory fieldFactory;
	
    public LifterEditor(Application app, WeighInList weighInList) {
        super("Edit Lifter");
        this.app = app;
        this.listEditor = weighInList;
        this.fieldFactory = new LifterListFieldFactory((SessionManager)app);
        
        Layout main = new VerticalLayout();
        setContent(main);
        main.setSizeUndefined();
        main.setStyleName(Panel.STYLE_LIGHT);
        
        categorySelect = (ComboBox)fieldFactory.getCategoryComboboxFor(0L);
        categorySelect.setCaption("Lifter");
        categorySelect.setRequired(true);
        
        FormLayout form = new FormLayout();
        form.setSizeUndefined();
        
        form.addComponent(lastName);
        form.addComponent(firstName);
        form.addComponent(gender);
        form.addComponent(categorySelect);
        form.addComponent(bodyWeight);
        form.addComponent(snatch1Declaration);
        form.addComponent(cleanJerk1Declaration);

        main.addComponent(form);

        HorizontalLayout actions = new HorizontalLayout();
        actions.addComponent(save);

        save.addListener(this);

        actions.addComponent(delete);
        delete.addListener(this);

        main.addComponent(actions);

    }
    
    public Session getSession() {
		return ((SessionManager)app).getSession();
	}

    public void loadLifter(Lifter lifter, Long id) {
    	if (lifter == null) {
            close();
        } else {
            if (getParent() == null) {
                app.getMainWindow().addWindow(this);
            }
            
            lastName.setValue(lifter.getLastName());
            firstName.setValue(lifter.getFirstName());

            final Category category = lifter.getCategory();
			categorySelect.select(category != null ? category.getId() : 0L);
            
            bodyWeight.setValue(lifter.getBodyWeight());
            snatch1Declaration.setValue(lifter.getSnatch1Declaration());
            cleanJerk1Declaration.setValue(lifter.getCleanJerk1Declaration());

            lastName.focus();
            this.lifter = lifter;
        }
    }

    public void buttonClick(ClickEvent event) {
        if (event.getButton() == delete) {
            listEditor.deleteItem(lifter.getId());
        } else if (event.getButton() == save) {
            lifter.setLastName((String) lastName.getValue());
            
            Long categoryId = (Long)categorySelect.getValue();
            if (categoryId != null) {
            	Category category = (Category)((SessionManager)listEditor).getSession().load(Category.class, categoryId);
            	lifter.setCategory(category);
            } 
            listEditor.persistPojo(lifter);
        }
        if (getParent() != null) {
            ((Window) getParent()).removeWindow(this);
        }
    }
}
